name: Build and Release Binaries

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          WSHIRT_VERSION: ${{ env.NEW_VERSION }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wshirt-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/wshirt

  version:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Get latest release version
        id: get_version
        run: |
          LATEST=$(git tag --list 'v*' --sort=-v:refname | head -n1 | sed 's/^v//')
          if [[ ! "$LATEST" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            MAJOR=0
            MINOR=0
            PATCH=0
          else
            IFS='.' read -r MAJOR MINOR PATCH <<<"$LATEST"
          fi
          PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"
      - name: Create and push tag
        run: |
          git tag v$NEW_VERSION
          git push origin v$NEW_VERSION
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/wshirt-x86_64-unknown-linux-gnu/wshirt
          asset_name: wshirt-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/wshirt-x86_64-pc-windows-msvc/wshirt.exe
          asset_name: wshirt-x86_64-pc-windows-msvc.exe
          asset_content_type: application/octet-stream
      - name: Upload Mac ARM Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/wshirt-aarch64-apple-darwin/wshirt
          asset_name: wshirt-aarch64-apple-darwin
          asset_content_type: application/octet-stream
